// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: block.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetLatestBlockServiceClient is the client API for GetLatestBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetLatestBlockServiceClient interface {
	Block(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error)
}

type getLatestBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetLatestBlockServiceClient(cc grpc.ClientConnInterface) GetLatestBlockServiceClient {
	return &getLatestBlockServiceClient{cc}
}

func (c *getLatestBlockServiceClient) Block(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error) {
	out := new(GetLatestBlockResponse)
	err := c.cc.Invoke(ctx, "/blockchain.GetLatestBlockService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetLatestBlockServiceServer is the server API for GetLatestBlockService service.
// All implementations must embed UnimplementedGetLatestBlockServiceServer
// for forward compatibility
type GetLatestBlockServiceServer interface {
	Block(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error)
	mustEmbedUnimplementedGetLatestBlockServiceServer()
}

// UnimplementedGetLatestBlockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetLatestBlockServiceServer struct {
}

func (UnimplementedGetLatestBlockServiceServer) Block(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedGetLatestBlockServiceServer) mustEmbedUnimplementedGetLatestBlockServiceServer() {}

// UnsafeGetLatestBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetLatestBlockServiceServer will
// result in compilation errors.
type UnsafeGetLatestBlockServiceServer interface {
	mustEmbedUnimplementedGetLatestBlockServiceServer()
}

func RegisterGetLatestBlockServiceServer(s grpc.ServiceRegistrar, srv GetLatestBlockServiceServer) {
	s.RegisterService(&GetLatestBlockService_ServiceDesc, srv)
}

func _GetLatestBlockService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetLatestBlockServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.GetLatestBlockService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetLatestBlockServiceServer).Block(ctx, req.(*GetLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetLatestBlockService_ServiceDesc is the grpc.ServiceDesc for GetLatestBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetLatestBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.GetLatestBlockService",
	HandlerType: (*GetLatestBlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Block",
			Handler:    _GetLatestBlockService_Block_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
