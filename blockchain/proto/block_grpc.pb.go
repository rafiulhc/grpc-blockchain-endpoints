// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: block.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetLatestBlockServiceClient is the client API for GetLatestBlockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetLatestBlockServiceClient interface {
	GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (GetLatestBlockService_GetLatestBlockClient, error)
}

type getLatestBlockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetLatestBlockServiceClient(cc grpc.ClientConnInterface) GetLatestBlockServiceClient {
	return &getLatestBlockServiceClient{cc}
}

func (c *getLatestBlockServiceClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (GetLatestBlockService_GetLatestBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &GetLatestBlockService_ServiceDesc.Streams[0], "/blockchain.GetLatestBlockService/GetLatestBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &getLatestBlockServiceGetLatestBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GetLatestBlockService_GetLatestBlockClient interface {
	Recv() (*GetLatestBlockResponse, error)
	grpc.ClientStream
}

type getLatestBlockServiceGetLatestBlockClient struct {
	grpc.ClientStream
}

func (x *getLatestBlockServiceGetLatestBlockClient) Recv() (*GetLatestBlockResponse, error) {
	m := new(GetLatestBlockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GetLatestBlockServiceServer is the server API for GetLatestBlockService service.
// All implementations must embed UnimplementedGetLatestBlockServiceServer
// for forward compatibility
type GetLatestBlockServiceServer interface {
	GetLatestBlock(*GetLatestBlockRequest, GetLatestBlockService_GetLatestBlockServer) error
	mustEmbedUnimplementedGetLatestBlockServiceServer()
}

// UnimplementedGetLatestBlockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetLatestBlockServiceServer struct {
}

func (UnimplementedGetLatestBlockServiceServer) GetLatestBlock(*GetLatestBlockRequest, GetLatestBlockService_GetLatestBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedGetLatestBlockServiceServer) mustEmbedUnimplementedGetLatestBlockServiceServer() {}

// UnsafeGetLatestBlockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetLatestBlockServiceServer will
// result in compilation errors.
type UnsafeGetLatestBlockServiceServer interface {
	mustEmbedUnimplementedGetLatestBlockServiceServer()
}

func RegisterGetLatestBlockServiceServer(s grpc.ServiceRegistrar, srv GetLatestBlockServiceServer) {
	s.RegisterService(&GetLatestBlockService_ServiceDesc, srv)
}

func _GetLatestBlockService_GetLatestBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLatestBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GetLatestBlockServiceServer).GetLatestBlock(m, &getLatestBlockServiceGetLatestBlockServer{stream})
}

type GetLatestBlockService_GetLatestBlockServer interface {
	Send(*GetLatestBlockResponse) error
	grpc.ServerStream
}

type getLatestBlockServiceGetLatestBlockServer struct {
	grpc.ServerStream
}

func (x *getLatestBlockServiceGetLatestBlockServer) Send(m *GetLatestBlockResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GetLatestBlockService_ServiceDesc is the grpc.ServiceDesc for GetLatestBlockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetLatestBlockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.GetLatestBlockService",
	HandlerType: (*GetLatestBlockServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLatestBlock",
			Handler:       _GetLatestBlockService_GetLatestBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "block.proto",
}
